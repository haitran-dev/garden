---
import Layout from "@/layouts/Layout.astro";
import "@/styles/demo-shared.css";
---

<Layout title="CSS Grid Playground">
  <main class="demo-container">
    <header class="demo-header">
      <a href="/demos" class="back-link">‚Üê Back to Demos</a>
      <h1 class="demo-title">CSS Grid Playground</h1>
      <p class="demo-description">
        Interactive CSS Grid builder with live preview
      </p>
    </header>

    <div class="playground">
      <div class="controls">
        <section class="control-group">
          <h3>Grid Settings</h3>
          <div class="control-item">
            <label>Columns</label>
            <input
              type="range"
              min="1"
              max="6"
              value="3"
              class="columns-control"
            />
            <span class="value">3</span>
          </div>
          <div class="control-item">
            <label>Rows</label>
            <input
              type="range"
              min="1"
              max="6"
              value="3"
              class="rows-control"
            />
            <span class="value">3</span>
          </div>
          <div class="control-item">
            <label>Gap</label>
            <input
              type="range"
              min="0"
              max="40"
              value="16"
              class="gap-control"
            />
            <span class="value">16px</span>
          </div>
        </section>

        <section class="control-group">
          <h3>Presets</h3>
          <div class="preset-buttons">
            <button data-preset="holy-grail">Holy Grail</button>
            <button data-preset="dashboard">Dashboard</button>
            <button data-preset="gallery">Gallery</button>
          </div>
        </section>
      </div>

      <div class="preview">
        <div class="grid-container">
          <div class="grid-item">1</div>
          <div class="grid-item">2</div>
          <div class="grid-item">3</div>
          <div class="grid-item">4</div>
          <div class="grid-item">5</div>
          <div class="grid-item">6</div>
          <div class="grid-item">7</div>
          <div class="grid-item">8</div>
          <div class="grid-item">9</div>
        </div>
        <pre class="css-output"><code /></pre>
      </div>
    </div>
  </main>
</Layout>

<style>
  .playground {
    display: grid;
    grid-template-columns: 300px 1fr;
    gap: 2rem;
    margin-top: 2rem;
  }

  .controls {
    background: white;
    padding: 1.5rem;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }

  .control-group {
    margin-bottom: 2rem;
  }

  .control-group h3 {
    margin-bottom: 1rem;
    color: #333;
  }

  .control-item {
    display: grid;
    grid-template-columns: 1fr auto;
    gap: 0.5rem;
    align-items: center;
    margin-bottom: 1rem;
  }

  .control-item label {
    font-size: 0.9rem;
    color: #666;
  }

  input[type="range"] {
    width: 100%;
    grid-column: 1 / -1;
  }

  .value {
    font-size: 0.9rem;
    color: #666;
  }

  .preset-buttons {
    display: grid;
    gap: 0.5rem;
  }

  .preset-buttons button {
    padding: 0.5rem;
    background: #f0f0f0;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    transition: background 0.3s ease;
  }

  .preset-buttons button:hover {
    background: #e0e0e0;
  }

  .preview {
    background: white;
    padding: 2rem;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }

  .grid-container {
    margin-bottom: 2rem;
    min-height: 400px;
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    grid-template-rows: repeat(3, 1fr);
    gap: 1rem;
  }

  .grid-item {
    background: #f0f0f0;
    padding: 1rem;
    display: grid;
    place-items: center;
    font-size: 1.5rem;
    color: #666;
    border-radius: 4px;
    transition: all 0.3s ease;
  }

  .grid-item:hover {
    background: #e0e0e0;
    transform: scale(1.02);
  }

  .css-output {
    background: #f5f5f5;
    padding: 1rem;
    border-radius: 4px;
    font-family: monospace;
    font-size: 0.9rem;
    white-space: pre-wrap;
  }

  @media (max-width: 768px) {
    .playground {
      grid-template-columns: 1fr;
    }
  }
</style>

<script>
  const gridContainer = document.querySelector(".grid-container");
  const cssOutput = document.querySelector(".css-output code");

  const columnsControl = document.querySelector(".columns-control");
  const rowsControl = document.querySelector(".rows-control");
  const gapControl = document.querySelector(".gap-control");

  // Find the value spans next to each control
  const valueSpans = document.querySelectorAll(".control-item .value");
  const [columnsValue, rowsValue, gapValue] = valueSpans;

  function updateGrid() {
    if (!gridContainer || !cssOutput) return;

    const columns = (columnsControl as HTMLInputElement).value;
    const rows = (rowsControl as HTMLInputElement).value;
    const gap = (gapControl as HTMLInputElement).value;

    // Update grid styles
    gridContainer.style.gridTemplateColumns = `repeat(${columns}, 1fr)`;
    gridContainer.style.gridTemplateRows = `repeat(${rows}, 1fr)`;
    gridContainer.style.gap = `${gap}px`;

    // Update value displays
    columnsValue.textContent = columns;
    rowsValue.textContent = rows;
    gapValue.textContent = `${gap}px`;

    // Update CSS output
    cssOutput.textContent = `
.grid-container {
  display: grid;
  grid-template-columns: repeat(${columns}, 1fr);
  grid-template-rows: repeat(${rows}, 1fr);
  gap: ${gap}px;
}`.trim();
  }

  // Add event listeners
  columnsControl?.addEventListener("input", updateGrid);
  rowsControl?.addEventListener("input", updateGrid);
  gapControl?.addEventListener("input", updateGrid);

  // Handle presets
  const presets = {
    "holy-grail": { columns: 3, rows: 3, gap: 16 },
    dashboard: { columns: 4, rows: 2, gap: 20 },
    gallery: { columns: 3, rows: 2, gap: 12 },
  };

  document.querySelectorAll("[data-preset]").forEach((button) => {
    button.addEventListener("click", () => {
      const presetName = (button as HTMLElement).dataset
        .preset as keyof typeof presets;
      const preset = presets[presetName];

      if (preset) {
        (columnsControl as HTMLInputElement).value = preset.columns.toString();
        (rowsControl as HTMLInputElement).value = preset.rows.toString();
        (gapControl as HTMLInputElement).value = preset.gap.toString();
        updateGrid();
      }
    });
  });

  // Initial update
  updateGrid();
</script>
